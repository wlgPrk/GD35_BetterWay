<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">

	<!-- parameterType :받는값 -->
	<select id="getAdmin" parameterType="hashmap" resultType="hashmap">
	SELECT ADMIN_ID,ADMIN_NO,ADMIN_PW
	FROM ADMIN
	WHERE ADMIN_ID=#{id} 
	AND ADMIN_PW=#{pw}
	</select>

	<!-- 행복지대 -->
	<select id="getHDetail" parameterType="hashmap" resultType="hashmap">
	SELECT H.HAPPY_NO, H.SUBWAY_STATION_INCODE,ST.SUBWAY_STATION_NAME, H.LOCATION, 
	H.AREA, H.OPERATING_AGENCY, H.PHONE_NUM, H.DEL_STATUS 
	FROM HAPPY H INNER JOIN SUBWAY_STATION ST
                	ON H.SUBWAY_STATION_INCODE = ST.SUBWAY_STATION_INCODE
	WHERE H.HAPPY_NO = #{happy_no}
	</select>
	
	<insert id="addHT" parameterType="hashmap">
	INSERT INTO HAPPY(HAPPY_NO, SUBWAY_STATION_INCODE, ADMIN_NO, 
                LOCATION, AREA, OPERATING_AGENCY, PHONE_NUM, DEL_STATUS)
	VALUES(HAPPY_SEQ.NEXTVAL, #{subway_station_incode} , 2, 
			#{location}, #{area}, #{operating_agency}, #{phone_num},1)
	</insert>
	
	<update id="updateHT">
	UPDATE HAPPY SET SUBWAY_STATION_INCODE = #{subway_station_incode}, 
				 LOCATION = #{location}, AREA = #{area}, 
                 OPERATING_AGENCY = #{operating_agency}, PHONE_NUM = #{phone_num}
	WHERE HAPPY_NO = #{happy_no}
	</update>
	
	<update id="deleteHT" parameterType="hashmap">
	UPDATE HAPPY SET DEL_STATUS = 0 
	WHERE HAPPY_NO = #{happy_no}
	</update>
	<!-- 행복지대 끝 -->
	
	<!-- 수유실 시작 -->
	<select id="getnursingRoomDetail" parameterType="hashmap" resultType="hashmap">
	SELECT ST.SUBWAY_STATION_INCODE,ST.SUBWAY_STATION_NAME, ST.MAIN_PHONE_NUM, ST.SUBLINE_NO, ES.NURSINGROOM_EXIST
	FROM SUBWAY_STATION ST RIGHT OUTER JOIN SUBWAY_STATION_ESTA ES
                        ON ST.SUBWAY_STATION_INCODE = ES.SUBWAY_STATION_INCODE
	WHERE ES.NURSINGROOM_EXIST = 1 AND ST.SUBWAY_STATION_INCODE = #{subway_station_incode}
	ORDER BY SUBLINE_NO ASC
	</select>
	
	<update id="addnursingRoomT" parameterType="hashmap">
	UPDATE SUBWAY_STATION_ESTA SET NURSINGROOM_EXIST = 1
	WHERE SUBWAY_STATION_INCODE = #{subway_station_incode}
	</update>
	
	<update id="deletenursingRoomT" parameterType="hashmap">
	UPDATE SUBWAY_STATION_ESTA SET NURSINGROOM_EXIST = 0
	WHERE SUBWAY_STATION_INCODE = #{subway_station_incode}
	</update>
	<!-- 수유실 끝 -->
	
	<!-- 자전거보관함 시작 -->
	<select id="getCDetail" parameterType="hashmap" resultType="hashmap">
	SELECT ST.SUBWAY_STATION_INCODE,ST.SUBLINE_NO, ST.SUBWAY_STATION_NAME,ES.CYCLE_EXIST
	FROM SUBWAY_STATION ST INNER JOIN SUBWAY_STATION_ESTA ES
                        ON ST.SUBWAY_STATION_INCODE = ES.SUBWAY_STATION_INCODE
	WHERE ES.CYCLE_EXIST = 1 AND ST.SUBWAY_STATION_INCODE = #{subway_station_incode}
	ORDER BY SUBWAY_STATION_INCODE ASC
	</select>
	
	<update id="addcycleT" parameterType="hashmap">
	UPDATE SUBWAY_STATION_ESTA SET CYCLE_EXIST = 1
	WHERE SUBWAY_STATION_INCODE = #{subway_station_incode}
	</update>
	
	<update id="deletecycleT" parameterType="hashmap">
	UPDATE SUBWAY_STATION_ESTA SET CYCLE_EXIST = 0
	WHERE SUBWAY_STATION_INCODE = #{subway_station_incode}
	</update>
	<!-- 자전거보관함 끝 -->
	
	<!-- 연단간격 시작 -->
	<select id="getwheelchairDetail" parameterType="hashmap" resultType="hashmap">
	SELECT NR.NRWP_SPACING_NO, NR.SUBWAY_STATION_INCODE,NR.DIRECTION,NR.PLATFORM_NO, ST.SUBWAY_STATION_NAME
	FROM NRWP_SPACING NR INNER JOIN SUBWAY_STATION ST
                     ON NR.SUBWAY_STATION_INCODE = ST.SUBWAY_STATION_INCODE
	WHERE NRWP_SPACING_NO = #{nrwp_spacing_no}
	ORDER BY NRWP_SPACING_NO ASC
	</select>
	
	<insert id="addwheelchairT" parameterType="hashmap">
	INSERT INTO NRWP_SPACING(NRWP_SPACING_NO, SUBWAY_STATION_INCODE, ADMIN_NO,
                         DIRECTION, PLATFORM_NO)
	VALUES(NRWP_SEQ.NEXTVAL, #{subway_station_incode}, 2, #{direction}, #{platform_no})
	</insert>
	
	<update id="updatewheelchairT" parameterType="hashmap">
	UPDATE NRWP_SPACING SET SUBWAY_STATION_INCODE = #{subway_station_incode}, 
	DIRECTION= #{direction} ,PLATFORM_NO = #{platform_no}
	WHERE NRWP_SPACING_NO = #{nrwp_spacing_no}
	</update>
	
	<delete id="deletewheelchairT" parameterType="hashmap">
	DELETE FROM  NRWP_SPACING
	WHERE NRWP_SPACING_NO = #{nrwp_spacing_no}
	</delete>
	<!-- 연단간격 끝 -->

	<select id="getcoolingDetail" parameterType="hashmap" resultType="hashmap">
	SELECT WEAK_COOLING_CAR_NO,SUBLINE_NO,CAR_NO
	FROM WEAK_COOLING_CAR
	WHERE WEAK_COOLING_CAR_NO=#{weak_cooling_car_no}
	</select>
	
	<insert id="addcooling" parameterType="hashmap">
	INSERT INTO WEAK_COOLING_CAR
	VALUES(COOLING_SEQ.NEXTVAL,#{subline_no},4,#{car_no})
	</insert>
	
	<select id="guideList" parameterType="hashmap" resultType="hashmap">
	SELECT GUIDE_NO,CATEGORY,TRAFFIC_CARD,D_TRAFFIC_CARD
	FROM CHARGE_GUIDE
	
	</select>
	
	<!-- 운임 상세 -->
	<select id="getguideDetail" parameterType="hashmap" resultType="hashmap">
	SELECT GUIDE_NO,CATEGORY,TRAFFIC_CARD,D_TRAFFIC_CARD
	FROM CHARGE_GUIDE
	WHERE GUIDE_NO=#{guide_no}
	</select>
	
	<select id="getc" parameterType="hashmap" resultType="hashmap">
	SELECT WEAK_COOLING_CAR_NO,SUBLINE_NO,CAR_NO
	FROM WEAK_COOLING_CAR
	WHERE WEAK_COOLING_CAR_NO=#{weak_cooling_car_no}
	</select>
	
	<!-- 냉방 업데이트 -->
	<update id="updateS" parameterType="hashmap">
	UPDATE WEAK_COOLING_CAR SET CAR_NO = #{car_no}
  	WHERE WEAK_COOLING_CAR_NO = #{weak_cooling_car_no}
	</update>
	
	<!-- 냉방 삭제 -->
	<delete id="deletecooling" parameterType="hashmap">
	DELETE FROM WEAK_COOLING_CAR
	WHERE WEAK_COOLING_CAR_NO=#{weak_cooling_car_no}
	</delete>
	
	<!-- 운임 등록 -->
	<insert id="addguide" parameterType="hashmap">
	INSERT INTO CHARGE_GUIDE
	VALUES(CHARGE_SEQ.NEXTVAL,#{category},#{traffic_card},#{d_traffic_card},4)
	</insert>
	
	<!-- 운임 업데이트 -->
	<update id="updateG" parameterType="hashmap">
	 UPDATE CHARGE_GUIDE SET CATEGORY = #{category}, TRAFFIC_CARD=#{traffic_card},D_TRAFFIC_CARD=#{d_traffic_card}
  	 WHERE GUIDE_NO = #{guide_no}
	</update>	
	<select id="getg" parameterType="hashmap" resultType="hashmap">
	SELECT GUIDE_NO,CATEGORY,TRAFFIC_CARD,D_TRAFFIC_CARD
	FROM CHARGE_GUIDE
	WHERE GUIDE_NO=#{guide_no}
	</select> 
	<!-- 운임 삭제 -->
	<delete id="deleteguide" parameterType="hashmap">
	DELETE FROM CHARGE_GUIDE
	WHERE GUIDE_NO=#{guide_no}
	</delete>
	
	
	
	
	<!-- 유저게시물최대갯수 -->
	<select id="getUserCnt" parameterType="hashMap" resultType="Integer">
	SELECT COUNT(*)
FROM(
SELECT SUG_NO,REQ_NO,POST_TYPE_CODE,USER_ID,ADMIN_ID,TITLE,
CON,WRITE_DATE,DEL_STATUS,
ROW_NUMBER() OVER(ORDER BY ANO DESC) AS RNUM
FROM(
SELECT S.SUG_NO,S.REQ_NO,S.POST_TYPE_CODE,S.USER_ID,
A.ADMIN_ID,S.TITLE,S.CON,TO_CHAR(S.WRITE_DATE,'YYYY-MM-DD') AS WRITE_DATE,S.DEL_STATUS,
CASE WHEN REQ_NO !=0
     THEN REQ_NO 
     ELSE SUG_NO
     END ANO
FROM SUG S INNER JOIN ADMIN A
ON S.ADMIN_NO = A.ADMIN_NO
WHERE 1=1 AND S.POST_TYPE_CODE !=0
<if test="userSearchTxt !=''">
<choose>
<when test="userSearchGbn ==0">
AND SUG_NO = #{userSearchTxt}
</when>
<when test="userSearchGbn ==1">
AND S.USER_ID LIKE '%' || #{userSearchTxt} || '%' OR A.ADMIN_ID LIKE '%' || #{userSearchTxt} || '%'
</when>
<when test="userSearchGbn ==2">
AND S.TITLE LIKE '%' || #{userSearchTxt} || '%'
</when>
</choose>
</if>

<choose>
<when test="userPostTypeGbn==1">
AND S.POST_TYPE_CODE =1
</when>
<when test="userPostTypeGbn==2">
AND S.POST_TYPE_CODE =2
</when>
</choose>
<choose>
<when test="userDelete ==1">
AND S.DEL_STATUS=0
</when> 
<when test="userDelete ==2">
AND S.DEL_STATUS=1 
</when> 
</choose>
))
<if test="userDate != ''">
WHERE WRITE_DATE =#{userDate}
</if>
	</select>
	
	<!-- 공지게시물최대갯수 -->
	<select id="getNoticeCnt" parameterType="hashMap" resultType="Integer">
SELECT COUNT(*)
FROM(
SELECT S.SUG_NO,S.POST_TYPE_CODE,S.USER_ID,
A.ADMIN_ID,S.TITLE,S.CON,TO_CHAR(S.WRITE_DATE,'YYYY-MM-DD') AS WRITE_DATE,S.DEL_STATUS,ROW_NUMBER() OVER(ORDER BY SUG_NO DESC) AS RNUM
FROM SUG S INNER JOIN ADMIN A
ON S.ADMIN_NO = A.ADMIN_NO
WHERE 1=1 AND S.POST_TYPE_CODE !=1 AND S.POST_TYPE_CODE !=2
<if test="noticeSearchTxt !='' " >
<choose>
<when test="noticeSearchGbn ==0">
AND SUG_NO = #{noticeSearchTxt}
</when>
<when test="noticeSearchGbn ==1">
AND A.ADMIN_ID LIKE '%' || #{noticeSearchTxt} || '%'
</when>
<when test="noticeSearchGbn ==2">
AND S.TITLE LIKE '%' || #{noticeSearchTxt} || '%'
</when>
</choose>

</if>

<choose>
<when test="noticeDelete ==1">
AND S.DEL_STATUS=0
</when> 
<when test="noticeDelete ==2">
AND S.DEL_STATUS=1 
</when> 

</choose>
)
<if test="noticeDate !=''">
WHERE WRITE_DATE=#{noticeDate}
</if>
	</select>
	<!--유저게시물리스트출력 -->
	<select id="getUserList" parameterType="hashMap" resultType="hashMap">
	SELECT SUG_NO,REQ_NO,POST_TYPE_CODE,USER_ID,ADMIN_ID,TITLE,
CON,WRITE_DATE,DEL_STATUS,RNUM
FROM(
SELECT SUG_NO,REQ_NO,POST_TYPE_CODE,USER_ID,ADMIN_ID,TITLE,
CON,WRITE_DATE,DEL_STATUS,
ROW_NUMBER() OVER(ORDER BY ANO DESC) AS RNUM
FROM(
SELECT S.SUG_NO,S.REQ_NO,S.POST_TYPE_CODE,S.USER_ID,
A.ADMIN_ID,S.TITLE,S.CON,TO_CHAR(S.WRITE_DATE,'YYYY-MM-DD') AS WRITE_DATE,S.DEL_STATUS,
CASE WHEN REQ_NO !=0
     THEN REQ_NO -1
     ELSE SUG_NO
     END ANO
FROM SUG S INNER JOIN ADMIN A
ON S.ADMIN_NO = A.ADMIN_NO
WHERE 1=1 AND S.POST_TYPE_CODE !=0
<if test="userSearchTxt !=''">
<choose>
<when test="userSearchGbn ==0">
AND SUG_NO = #{userSearchTxt}
</when>
<when test="userSearchGbn ==1">
AND S.USER_ID LIKE '%' || #{userSearchTxt} || '%' OR A.ADMIN_ID LIKE '%' || #{userSearchTxt} || '%'
</when>
<when test="userSearchGbn ==2">
AND S.TITLE LIKE '%' || #{userSearchTxt} || '%'
</when>
</choose>
</if>

<choose>
<when test="userPostTypeGbn==1">
AND S.POST_TYPE_CODE =1
</when>
<when test="userPostTypeGbn==2">
AND S.POST_TYPE_CODE =2
</when>
</choose>
<choose>
<when test="userDelete ==1">
AND S.DEL_STATUS=0
</when> 
<when test="userDelete ==2">
AND S.DEL_STATUS=1 
</when> 
</choose>
))
WHERE RNUM BETWEEN #{userStartCnt} AND #{userEndCnt}
<if test="userDate != ''">
AND WRITE_DATE =#{userDate}
</if>


	</select>
	
	
	
	
	
	<!--공지게시물리스트출력 -->
	<select id="getNoticeList" parameterType="hashMap" resultType="hashMap">
SELECT SUG_NO,POST_TYPE_CODE,USER_ID,ADMIN_ID,TITLE,
CON,WRITE_DATE,DEL_STATUS,RNUM
FROM(
SELECT S.SUG_NO,S.POST_TYPE_CODE,S.USER_ID,
A.ADMIN_ID,S.TITLE,S.CON,TO_CHAR(S.WRITE_DATE,'YYYY-MM-DD') AS WRITE_DATE,S.DEL_STATUS,ROW_NUMBER() OVER(ORDER BY SUG_NO DESC) AS RNUM
FROM SUG S INNER JOIN ADMIN A
ON S.ADMIN_NO = A.ADMIN_NO
WHERE 1=1 AND S.POST_TYPE_CODE !=1 AND S.POST_TYPE_CODE !=2
<if test="noticeSearchTxt !='' " >
<choose>
<when test="noticeSearchGbn ==0">
AND SUG_NO = #{noticeSearchTxt}
</when>
<when test="noticeSearchGbn ==1">
AND A.ADMIN_ID LIKE '%' || #{noticeSearchTxt} || '%'
</when>
<when test="noticeSearchGbn ==2">
AND S.TITLE LIKE '%' || #{noticeSearchTxt} || '%'
</when>
</choose>

</if>

<choose>
<when test="noticeDelete ==1">
AND S.DEL_STATUS=0
</when> 
<when test="noticeDelete ==2">
AND S.DEL_STATUS=1 
</when> 

</choose>
)
WHERE RNUM BETWEEN #{noticeStartCnt} AND #{noticeEndCnt}
<if test="noticeDate !=''">
AND WRITE_DATE=#{noticeDate}
</if>

	</select>
		
	
		
<!-- 건의게시물삭제 -->
<update id="deleteSug" parameterType="hashMap">
UPDATE SUG SET DEL_STATUS =0 , ADMIN_NO=#{sNO}
WHERE SUG_NO=#{sug_no}
</update>

		
<!-- 건의게시물 선택삭제 -->	
<update id="checkDeleteSug" parameterType="hashMap">
UPDATE SUG SET DEL_STATUS =0 , ADMIN_NO=#{sNO}
WHERE SUG_NO IN 
    <foreach collection="mapList" item="item" index="key" separator="," open="(" close=")"  >
        #{item}
    </foreach>
</update>


<!-- 건의게시물 선택삭제안에  댓글들삭제 -->	
<update id="checkDeleteSugComm" parameterType="hashMap">
UPDATE COMM SET DEL_STATUS =0 , ADMIN_NO=#{sNO}
WHERE SUG_NO IN 
       <foreach collection="mapList" item="item" index="key" separator="," open="(" close=")" >
        	#{item}
    </foreach>

</update>

<!-- 건의게시판작성 -->
<insert id="insertSugAdmin" parameterType="hashMap">
INSERT INTO SUG
VALUES(SUG_SEQ.NEXTVAL,0,#{sNO},0,#{sID},#{sPW},#{title},#{con},SYSDATE,0,0,1)

</insert>


		
<!-- 게시물답변 -->
<insert id="resultSug" parameterType="hashMap">

INSERT INTO SUG
VALUES(SUG_SEQ.NEXTVAL,#{sug_no},#{sNO},2,#{sID},#{sPW},#{title},#{con},SYSDATE,0,0,1)


</insert>		
		

		
		
		
		
		
		
		
		
		
</mapper>